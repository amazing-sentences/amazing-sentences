FROM ubuntu:22.04

LABEL maintainer="Jorge Juan RodrÃ­guez Manzano"

ARG WWWGROUP=www-data
ARG NODE_VERSION=16
ARG NODE_ENV=production
ARG POSTGRES_VERSION=14

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND noninteractive
ENV NODE_ENV $NODE_ENV
ENV TZ=UTC
ENV APP_ENV=production

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN apt-get update \
    && apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python2 \
    && mkdir -p ~/.gnupg \
    && chmod 600 ~/.gnupg \
    && echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf \
    && echo "keyserver hkp://keyserver.ubuntu.com" >> ~/.gnupg/dirmngr.conf \
    && gpg --recv-key 0x14aa40ec0831756756d7f66c4f4ea0aae5267a6c \
    && gpg --export 0x14aa40ec0831756756d7f66c4f4ea0aae5267a6c > /usr/share/keyrings/ppa_ondrej_php.gpg \
    && echo "deb [signed-by=/usr/share/keyrings/ppa_ondrej_php.gpg] https://ppa.launchpadcontent.net/ondrej/php/ubuntu jammy main" > /etc/apt/sources.list.d/ppa_ondrej_php.list \
    && apt-get update \
    && apt-get install -y php8.1-cli php8.1-dev \
       php8.1-pgsql php8.1-sqlite3 php8.1-gd \
       php8.1-curl \
       php8.1-imap php8.1-mysql php8.1-mbstring \
       php8.1-xml php8.1-zip php8.1-bcmath php8.1-soap \
       php8.1-intl php8.1-readline \
       php8.1-ldap \
       php8.1-msgpack php8.1-igbinary php8.1-redis php8.1-swoole \
       php8.1-memcached php8.1-pcov php8.1-xdebug \
    && php -r "readfile('https://getcomposer.org/installer');" | php -- --install-dir=/usr/bin/ --filename=composer \
    && curl -sLS https://deb.nodesource.com/setup_$NODE_VERSION.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g npm \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /usr/share/keyrings/yarn.gpg >/dev/null \
    && echo "deb [signed-by=/usr/share/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list \
    && curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /usr/share/keyrings/pgdg.gpg >/dev/null \
    && echo "deb [signed-by=/usr/share/keyrings/pgdg.gpg] http://apt.postgresql.org/pub/repos/apt jammy-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && apt-get update \
    && apt-get install -y yarn \
    && apt-get install -y mysql-client \
    && apt-get install -y postgresql-client-$POSTGRES_VERSION \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN setcap "cap_net_bind_service=+ep" /usr/bin/php8.1

# Container startup requirements
RUN useradd -g $WWWGROUP -u 1337 sail

COPY docker/8.1/start-container.production /usr/local/bin/start-container.production
COPY docker/8.1/supervisord.conf.production /etc/supervisor/conf.d/supervisord.conf
COPY docker/8.1/php.ini /etc/php/8.1/cli/conf.d/99-sail.ini
RUN chmod +x /usr/local/bin/start-container.production

RUN mkdir /.composer
RUN chmod -R ugo+rw /.composer
RUN chown -R sail:$WWWGROUP /.composer
RUN mkdir /home/sail
RUN chown -R sail:$WWWGROUP /home/sail
RUN chown sail:$WWWGROUP /usr/local/bin/start-container.production
RUN chmod -R o+rw /var/log/supervisor
RUN chmod -R o+rw /var/run
# End of Container startup requirements

# Laravel project files are made available to Sail local containers using a
# volume that places the project root contents into /var/www/html.
# This Dockerfile is intended to be run on a CI pipeline, so contents need
# to be manually copied over.
COPY composer.json composer.lock artisan ./
COPY package.json package-lock.json ./

COPY app app/
COPY bootstrap bootstrap/
COPY config config/
COPY database database/
COPY lang lang/
COPY public public/
COPY resources resources/
COPY routes routes/
COPY storage storage/
COPY vite.config.js .env.production.encrypted ./

RUN chown -R sail:$WWWGROUP /var/www/html
# End of manual copy for Laravel project files.

# Dependencies
USER sail
RUN composer install --no-dev --no-progress --no-interaction --optimize-autoloader
RUN npm ci

# Production optimizations
RUN php artisan optimize:clear
RUN php artisan route:cache
RUN php artisan view:cache

EXPOSE 8000

ENTRYPOINT ["start-container.production"]
